Binary Search Tree
Operations

'x' is a node
//////////////////////////////
INORDER-TREE-WALK(x)
if x =/= NIL
	INORDER-TREE-WALK(x.left)
	print x.key
	INORDER-TREE-WALK(x.right)
//////////////////////////////

//////////////////////////////
LEVELORDER(T)
Q = EMPTY
ENQUEUE(Q,T.root)
while Q =/= EMPTY
	x = DEQUEUE(Q)
	if x.left =/= NIL
		ENQUEUE(Q,x.left)
	if x.right =/= NIL
		ENQUEUE(Q,x.right)
	print x.key
//////////////////////////////

'k' is a key
//////////////////////////////
TREE-SEARCH(x,k)
if x == NIL or k == x.key
	return x
if k < x.key
	return TREE-SEARCH(x.left,k)
else
	return TREE-SEARCH(x.right,k)
//////////////////////////////

Not using recursion
//////////////////////////////
ITERATIVE-TREE-SEARCH(x,k)
while x =/= nill and k =/= x.key
	if k < x.key
		x = x.left
	else
		x = x.right
return x
//////////////////////////////

'x' is the root of the tree, can also be subtree
//////////////////////////////
TREE-MINIMUM(x)
while x.left =/= NIL
	x = x.left
return x
//////////////////////////////

//////////////////////////////
TREE-MAXIMUM(x)
while x.right =/= NIL
	x = x.right
return x
//////////////////////////////

Successor is the node that is next in key number
'p' is parent
//////////////////////////////
TREE-SUCCESSOR(x)
if x.right =/= NIL
	return TREE-MINIMUM(x)
y = x.p
while y =/= NIL and x == y.right
	x = y
	y = y.p
return y
//////////////////////////////

'T' is the tree
'z' is the node to insert
//////////////////////////////
TREE-INSERTION(T,z)
y = NIL
x = T.root
while x =/= NIL
	y = x
	if z.key < x.key
		x = x.left
	else
		x = x.right
z.p = y
if y == NIL
	T.root = z // Tree was empty
else if z.key < y.key
	y.left = z
else
	y.right = z
//////////////////////////////

//////////////////////////////
TREE-DELETE(T,z)
if z.left == NIL
	TRANSPLANT(T,z,z.right)
else if z.right == NIL
	TRANSPLANT(T,z,z.left)
else
	y = TREE-MINIMUM(z.right)
	if	y.p =/= z
		TRANSPLANT(T,y,y.right)
		y.right = z.right
		y.right.p = y
	TRANSPLANT(T,z,y)
	y.left = z.left
	y.left.p = y
//////////////////////////////

'u' is subtree root to be replace
'v' is subtree root who will replace
//////////////////////////////
TRANSPLANT(T,u,v)
if u.p == NIL
	T.root = v
else if u == u.p.left
	u.p.left = v
else
	u.p.right = v
if v =/= NIL
	v.p = u.p
//////////////////////////////


//////////////////////////////
FIND-UNCLE(x)
if x.p = NIL or x.p.p = NIL
	return NIL
else if x.p.p.left = x.p
	return x.p.p.right
else
	return x.p.p.left
//////////////////////////////

//////////////////////////////
Binary Search Tree
			[7]
			/ \
		   /   \
	     [4]   [9]
		 / \     \
		/   \     \
	  [3]   [5]   [10]

[7] is parent of [4]
[9] is simbling of [4]
[9] is uncle of [5]
[5] is child of [4]
[7] is grand-parent of [5]
[7] is successor of [5]
[4] is predecessor of [5]
[3] is min
[10] is max

//////////////////////////////
Red Black Tree
(k)Black, [k]Red, ()NIL
			(7)
			/ \
		   /   \
	     [4]   (9)
		 / \   / \
		/   \ ()  \
	  (3)   (5)   [10]
	  / \   / \    / \
	 () () () ()  () ()

Rules:
0. Nodes are either black or red
1. Root is always black
2. Red can only have black child
3. Every leaf is Black (NIL)
4. Path to end (NIL) contains same black node

//////////////////////////////
LEFT-ROTATE(T,x)
y = x.right
x.right = y.left
if y.left =/= T.nil
	y.left.p = x
y.p = x.p
if x.p == T.nil
	T.root = y
else if x == x.p.left
	x.p.left = y
else
	x.p.right = y
y.left = x
x.p = y
//////////////////////////////

//////////////////////////////
RIGHT-ROTATE(T,x)
y = x.left
x.left = y.right
if	y.right =/= T.nil
	y.right.p = x
y.p = x.p
if x.p == T.nil
	T.root = y
else if x == x.p.right
	x.p.right = y
else
	x.p.left = y
y.right = x
x.p = y
//////////////////////////////

//////////////////////////////
RB-INSERT(T,z)
y = T.nil
x = T.root
while x =/= T.nil
	y = x
	if z.key < x.key
		x = x.left
	else
		x = x.right
z.p = y
if y == T.nil
	T.root = z
else if z.key < y.key
	y.left = z
else
	y.right = z
z.left = T.nil
z.right = T.nil
z.color = RED
RB-INSERT-FIXUP(T,z)
//////////////////////////////

Case 1: 'z' uncle 'y' is RED
Case 2: 'z' uncle 'y' is BLACK and z is a right child
Case 3: 'z' uncle 'y' is BLACK and z is a left child
//////////////////////////////
RB-INSERT-FIXUP(T,z)
while z.p.color == RED
	if z.p == z.p.p.left
		y = z.p.p.right
		if y.color == RED		
			z.p.color = BLACK		// Case 1
			y.color = BLACK			// Case 1
			z.p.p.color = RED		// Case 1
			z = z.p.p				// Case 1
		else 
			if z == z.p.right
				z = z.p				// Case 2
				LEFT-ROTATE(T,z)	// Case 2
			z.p.color = BLACK		// Case 3
			z.p.p.color = RED		// Case 3
			RIGHT-ROTATE(T,z.p.p)	// Case 3
	else if z.p == z.p.p.right
		y = z.p.p.left			
		if y.color == RED		
			z.p.color = BLACK		// Case 1
			y.color = BLACK			// Case 1
			z.p.p.color = RED		// Case 1
			z = z.p.p				// Case 1
		else 
			if z == z.p.left	
				z = z.p				// Case 2
				RIGHT-ROTATE(T,z)	// Case 2
			z.p.color = BLACK		// Case 3
			z.p.p.color = RED		// Case 3
			LEFT-ROTATE(T,z.p.p)	// Case 3
T.root.color = BLACK
//////////////////////////////